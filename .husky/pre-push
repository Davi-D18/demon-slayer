#!/bin/bash

# Verifica se o bash está sendo usado
if [ -z "$BASH_VERSION" ]; then
    exec bash "$0" "$@"
fi

set -e

# Função para exibir um spinner enquanto o processo está rodando
spinner() {
    local pid=$1
    local message=$2
    local delay=0.1
    local spinstr=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
    local i=0
    tput civis # Esconde o cursor
    while ps -p $pid >/dev/null; do
        printf "\r%s %s" "$message" "${spinstr[i]}"
        i=$(((i + 1) % ${#spinstr[@]}))
        sleep $delay
    done
    tput cnorm # Mostra o cursor
    echo -ne "\r$message ✅\n"
}

# Função para exibir a seção de mensagens principais de forma mais organizada e centralizada
show_message() {
    clear
    local msg1="$1"
    local msg2="$2"
    local len=${#msg1}
    local width=50 # Largura do terminal para centralizar

    # Adiciona espaçamento à esquerda e direita para centralizar
    local padding=$(((width - len) / 2))
    local spaces=$(printf "%-${padding}s" " ")

    echo "========================================================"
    echo -e "${spaces}\033[1;34m$msg1\033[0m" # Título em azul, centralizado
    echo "--------------------------------------------------------"
    echo -e "${spaces}\033[1;32m$msg2\033[0m" # Ação em verde, centralizado
    echo "========================================================"
    echo ""
}

# Função para finalizar o processo do Vite
kill_vite_process() {
    echo "🚫 Finalizando o processo do Vite..."
    sleep 1.2
    if [[ -n "$VITE_PID" ]]; then
        pkill -f "vite preview" 2>/dev/null && echo "✅ Vite finalizado."
    else
        echo "ℹ️ Nenhum processo do Vite em execução."
    fi
}

# Verifica se o Vite já está rodando na porta 4173
check_vite_running() {
    if nc -z localhost 4173 >/dev/null 2>&1; then
        VITE_PID=$(lsof -t -i :4173)
    else
        VITE_PID=""
    fi
}

# Exibe mensagem inicial
show_message "Início do script: Configuração do Vite" "🔧 Preparando ambiente"
sleep 1.6

# Realiza o build do Vite
show_message "Etapa 1: Build do Vite" "🔍 Iniciando o build..."
npx vite build --mode production &>/dev/null &
build_pid=$!
spinner $build_pid "🔄 Realizando o build"

wait $build_pid
if [[ $? -ne 0 ]]; then
    echo "❌ ERRO: Falha no build.\nDica: Verifique a saída de 'npx vite build' para mais detalhes." >&2
    exit 1
fi

sleep 1.8

# Verifica se o servidor de preview já está rodando
show_message "Etapa 2: Verificação do servidor de preview" "🔄 Aguardando servidor iniciar..."
check_vite_running

if [[ -z "$VITE_PID" ]]; then
    npx vite preview --mode production &>/dev/null &
    VITE_PID=$!
    echo -n "🔄 Aguardando o servidor iniciar..."

    i=1
    while [ $i -le 10 ]; do
        if nc -z localhost 4173 >/dev/null 2>&1; then
            echo ""
            echo "✅ Servidor iniciado."
            sleep 1.5
            break
        fi

        echo "($i/10)"
        sleep 2
        i=$((i + 1))
    done

    if ! nc -z localhost 4173 >/dev/null 2>&1; then
        echo "❌ ERRO: Falha ao iniciar o servidor."
        kill_vite_process
        exit 1
    fi
else
    echo "✅ Servidor já rodando na porta 4173."
    sleep 1.5
fi

# Testa a página
show_message "Etapa 3: Verificação da página" "🔍 Validando página..."
if ! node validatePage.cjs; then
    echo ""
    echo "❌ ERRO: Falha na validação da página. Confira o arquivo 'validation_report.txt' para mais detalhes."
    kill_vite_process
    exit 1
else
    echo "✅ Página validada com sucesso."
fi

sleep 4

# Finaliza o servidor
show_message "Etapa 4: Finalizando o servidor" "⚙️ Finalizando processo..."
kill_vite_process
sleep 1.3

# Conclusão
show_message "Script concluído com sucesso!" "🚀 Push será executado!"
sleep 1.3
exit 0
